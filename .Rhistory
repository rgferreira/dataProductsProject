l = 0,
r = 0,
b = 0,
t = 0
))
response <- py$plotly(data, kwargs=list(layout=layout, filename="simple-3d-scatter", fileopt="overwrite"))
url <- response$url
trace2 <- trace1
library(plotly)
trace1 <- list(
x = c(-0.858927762914, 0.759678101763, 1.6178351592),
y = c(0.121607854144, 1.67084933716, 0.671663712413),
z = c(-0.0678156933388, 0.389506443363, 0.676541754404),
mode = "markers",
marker = list(
size = 12,
line = list(
color = "rgba(217, 217, 217, 0.14)",
width = 0.5
),
opacity = 0.8
),
type = "scatter3d"
)
data <- list(trace1, trace1)
layout <- list(margin = list(
l = 0,
r = 0,
b = 0,
t = 0
))
response <- py$plotly(data, kwargs=list(layout=layout, filename="simple-3d-scatter", fileopt="overwrite"))
url <- response$url
install.packages("devtools")
library(devtools)
library(plotly)
trace1 <- list(
x = c(-0.858927762914, 0.759678101763, 1.6178351592),
y = c(0.121607854144, 1.67084933716, 0.671663712413),
z = c(-0.0678156933388, 0.389506443363, 0.676541754404),
mode = "markers",
marker = list(
size = 12,
line = list(
color = "rgba(217, 217, 217, 0.14)",
width = 0.5
),
opacity = 0.8
),
type = "scatter3d"
)
data <- list(trace1, trace1)
layout <- list(margin = list(
l = 0,
r = 0,
b = 0,
t = 0
))
response <- py$plotly(data, kwargs=list(layout=layout, filename="simple-3d-scatter", fileopt="overwrite"))
url <- response$url
set_credentials_file("DemoAccount", "lr1c37zw81")
library(plotly)
install.packages("plotly")
open3d()
x <- sort(rnorm(1000))
y <- rnorm(1000)
z <- rnorm(1000) + atan2(x,y)
plot3d(x, y, z, col=rainbow(1000))
install.packages("rgl")
library(rgl)
library(rgl)
open3d()
x <- sort(rnorm(1000))
y <- rnorm(1000)
z <- rnorm(1000) + atan2(x,y)
plot3d(x, y, z, col=rainbow(1000))
dev.off
dev.off()
library(rgl)
open3d()
x <- sort(rnorm(1000))
y <- rnorm(1000)
z <- rnorm(1000) + atan2(x,y)
plot3d(x, y, z, col=rainbow(1000))
rp.plot3d(x, y, z)
library(rgl)
## =======================================================================
## scatter3D with fitted surface : the mtcars dataset
## implemented by Karline Soetaert
## =======================================================================
require(plot3D)
attach(mtcars)
# linear fit
fit <- lm(mpg ~ wt+disp)
# predict on x-y grid, for surface
wt.pred <- seq(1.5, 5.5, length.out = 30)
disp.pred <- seq(71, 472, length.out = 30)
xy <- expand.grid(wt = wt.pred,
disp = disp.pred)
mpg.pred <- matrix (nrow = 30, ncol = 30,
data = predict(fit, newdata = data.frame(xy), interval = "prediction"))
# predicted z-values, fitted points for droplines to surface
fitpoints <- predict(fit)
scatter3D(z = mpg, x = wt, y = disp, pch = 18, cex = 2,
theta = 20, phi = 20, ticktype = "detailed",
xlab = "wt", ylab = "disp", zlab = "mpg", clab = "mpg",
surf = list(x = wt.pred, y = disp.pred, z = mpg.pred,
facets = NA, fit = fitpoints),
colkey = list(length = 0.8, width = 0.4),
main = "mtcars")
detach(mtcars)
# TRY:
# require(plot3Drgl)
# plotrlg()
install.packages("plot3D")
library(plot3D)
library(rgl)
## =======================================================================
## scatter3D with fitted surface : the mtcars dataset
## implemented by Karline Soetaert
## =======================================================================
require(plot3D)
attach(mtcars)
# linear fit
fit <- lm(mpg ~ wt+disp)
# predict on x-y grid, for surface
wt.pred <- seq(1.5, 5.5, length.out = 30)
disp.pred <- seq(71, 472, length.out = 30)
xy <- expand.grid(wt = wt.pred,
disp = disp.pred)
mpg.pred <- matrix (nrow = 30, ncol = 30,
data = predict(fit, newdata = data.frame(xy), interval = "prediction"))
# predicted z-values, fitted points for droplines to surface
fitpoints <- predict(fit)
scatter3D(z = mpg, x = wt, y = disp, pch = 18, cex = 2,
theta = 20, phi = 20, ticktype = "detailed",
xlab = "wt", ylab = "disp", zlab = "mpg", clab = "mpg",
surf = list(x = wt.pred, y = disp.pred, z = mpg.pred,
facets = NA, fit = fitpoints),
colkey = list(length = 0.8, width = 0.4),
main = "mtcars")
detach(mtcars)
# TRY:
# require(plot3Drgl)
# plotrlg()
library(rgl)
## =======================================================================
## scatter3D with fitted surface : the mtcars dataset
## implemented by Karline Soetaert
## =======================================================================
require(plot3D)
attach(mtcars)
# linear fit
fit <- lm(mpg ~ wt+disp)
# predict on x-y grid, for surface
wt.pred <- seq(1.5, 5.5, length.out = 30)
disp.pred <- seq(71, 472, length.out = 30)
xy <- expand.grid(wt = wt.pred,
disp = disp.pred)
mpg.pred <- matrix (nrow = 30, ncol = 30,
data = predict(fit, newdata = data.frame(xy), interval = "prediction"))
# predicted z-values, fitted points for droplines to surface
fitpoints <- predict(fit)
scatter3D(z = mpg, x = wt, y = disp, pch = 19, cex = 1,
theta = 20, phi = 20, ticktype = "detailed",
xlab = "wt", ylab = "disp", zlab = "mpg", clab = "mpg",
surf = list(x = wt.pred, y = disp.pred, z = mpg.pred,
facets = NA, fit = fitpoints),
colkey = list(length = 0.8, width = 0.4),
main = "mtcars")
detach(mtcars)
# TRY:
# require(plot3Drgl)
# plotrlg()
library(rgl)
## =======================================================================
## scatter3D with fitted surface : the mtcars dataset
## implemented by Karline Soetaert
## =======================================================================
require(plot3D)
attach(mtcars)
# linear fit
fit <- lm(mpg ~ wt+disp)
# predict on x-y grid, for surface
wt.pred <- seq(1.5, 5.5, length.out = 30)
disp.pred <- seq(71, 472, length.out = 30)
xy <- expand.grid(wt = wt.pred,
disp = disp.pred)
mpg.pred <- matrix (nrow = 30, ncol = 30,
data = predict(fit, newdata = data.frame(xy), interval = "prediction"))
# predicted z-values, fitted points for droplines to surface
fitpoints <- predict(fit)
scatter3D(z = mpg, x = wt, y = disp, pch = 19, cex.main = 1,
theta = 20, phi = 20, ticktype = "detailed",
xlab = "wt", ylab = "disp", zlab = "mpg", clab = "mpg",
surf = list(x = wt.pred, y = disp.pred, z = mpg.pred,
facets = NA, fit = fitpoints),
colkey = list(length = 0.8, width = 0.4),
main = "mtcars")
detach(mtcars)
# TRY:
# require(plot3Drgl)
# plotrlg()
library(rgl)
## =======================================================================
## scatter3D with fitted surface : the mtcars dataset
## implemented by Karline Soetaert
## =======================================================================
require(plot3D)
attach(mtcars)
# linear fit
fit <- lm(mpg ~ wt+disp)
# predict on x-y grid, for surface
wt.pred <- seq(1.5, 5.5, length.out = 30)
disp.pred <- seq(71, 472, length.out = 30)
xy <- expand.grid(wt = wt.pred,
disp = disp.pred)
mpg.pred <- matrix (nrow = 30, ncol = 30,
data = predict(fit, newdata = data.frame(xy), interval = "prediction"))
# predicted z-values, fitted points for droplines to surface
fitpoints <- predict(fit)
scatter3D(z = mpg, x = wt, y = disp, pch = 19, cex.main = 0.4,
theta = 20, phi = 20, ticktype = "detailed",
xlab = "wt", ylab = "disp", zlab = "mpg", clab = "mpg",
surf = list(x = wt.pred, y = disp.pred, z = mpg.pred,
facets = NA, fit = fitpoints),
colkey = list(length = 0.8, width = 0.4),
main = "mtcars")
detach(mtcars)
# TRY:
# require(plot3Drgl)
# plotrlg()
library(rgl)
## =======================================================================
## scatter3D with fitted surface : the mtcars dataset
## implemented by Karline Soetaert
## =======================================================================
require(plot3D)
attach(mtcars)
# linear fit
fit <- lm(mpg ~ wt+disp)
# predict on x-y grid, for surface
wt.pred <- seq(1.5, 5.5, length.out = 30)
disp.pred <- seq(71, 472, length.out = 30)
xy <- expand.grid(wt = wt.pred,
disp = disp.pred)
mpg.pred <- matrix (nrow = 30, ncol = 30,
data = predict(fit, newdata = data.frame(xy), interval = "prediction"))
# predicted z-values, fitted points for droplines to surface
fitpoints <- predict(fit)
scatter3D(z = mpg, x = wt, y = disp, pch = 19, cex = 0.4,
theta = 20, phi = 20, ticktype = "detailed",
xlab = "wt", ylab = "disp", zlab = "mpg", clab = "mpg",
surf = list(x = wt.pred, y = disp.pred, z = mpg.pred,
facets = NA, fit = fitpoints),
colkey = list(length = 0.8, width = 0.4),
main = "mtcars")
detach(mtcars)
# TRY:
# require(plot3Drgl)
# plotrlg()
library(rgl)
## =======================================================================
## scatter3D with fitted surface : the mtcars dataset
## implemented by Karline Soetaert
## =======================================================================
require(plot3D)
attach(mtcars)
# linear fit
fit <- lm(mpg ~ wt+disp)
# predict on x-y grid, for surface
wt.pred <- seq(1.5, 5.5, length.out = 30)
disp.pred <- seq(71, 472, length.out = 30)
xy <- expand.grid(wt = wt.pred,
disp = disp.pred)
mpg.pred <- matrix (nrow = 30, ncol = 30,
data = predict(fit, newdata = data.frame(xy), interval = "prediction"))
# predicted z-values, fitted points for droplines to surface
fitpoints <- predict(fit)
scatter3D(z = mpg, x = wt, y = disp, pch = 19, cex = 0.4,
theta = 20, phi = 20, ticktype = "detailed",
xlab = "wt", ylab = "disp", zlab = "mpg", clab = "mpg",
surf = list(x = wt.pred, y = disp.pred, z = mpg.pred,
facets = NA, fit = fitpoints),
colkey = list(length = 0.8, width = 0.4),
main = "mtcars", cex.labels = 0.7, cex.axis =0.7)
detach(mtcars)
# TRY:
# require(plot3Drgl)
# plotrlg()
library(rgl)
## =======================================================================
## scatter3D with fitted surface : the mtcars dataset
## implemented by Karline Soetaert
## =======================================================================
require(plot3D)
attach(mtcars)
# linear fit
fit <- lm(mpg ~ wt+disp)
# predict on x-y grid, for surface
wt.pred <- seq(1.5, 5.5, length.out = 30)
disp.pred <- seq(71, 472, length.out = 30)
xy <- expand.grid(wt = wt.pred,
disp = disp.pred)
mpg.pred <- matrix (nrow = 30, ncol = 30,
data = predict(fit, newdata = data.frame(xy), interval = "prediction"))
# predicted z-values, fitted points for droplines to surface
fitpoints <- predict(fit)
scatter3D(z = mpg, x = wt, y = disp, pch = 19, cex = 0.4,
theta = 20, phi = 45, ticktype = "detailed",
xlab = "wt", ylab = "disp", zlab = "mpg", clab = "mpg",
surf = list(x = wt.pred, y = disp.pred, z = mpg.pred,
facets = NA, fit = fitpoints),
colkey = list(length = 0.8, width = 0.4),
main = "mtcars", cex.labels = 0.7, cex.axis =0.7)
detach(mtcars)
# TRY:
# require(plot3Drgl)
# plotrlg()
install.packages("sculpt3d")
library(rgl)
plot3d(iris[ ,1:3])
plot3d(iris[ ,1:3])
install.packages("shinyRGL")
library(shinyRGL)
library(rgl)
library(shinyRGL)
attach(mtcars)
plot3d(mtcars[ ,1:3])
detach(mtcars)
plot3d(mtcars[ ,1:3], type = "s")
plot3d(mtcars[ ,1:3], type = "s", col = "blue")
plot3d(mtcars[ ,1:3], type = "s", col = "blue", radius = 2)
plot3d(mtcars[ ,1:3], type = "s", col = "blue", radius = 6)
plot3d(mtcars[ ,1:3], type = "s", col = "blue", radius = 6, lwd=1)
plot3d(mtcars[ ,1:3], type = "s", col = "blue", radius = 6, lwd=0)
axes3d(labels=TRUE)
plot3d(mtcars[ ,1:3], type = "s", col = "blue", radius = 6, lwd=0, );
axes3d(labels=TRUE)
plot3d(mtcars[ ,1:3], type = "s", col = "blue", radius = 6, lwd=0, );
axes3d(labels=TRUE); identify3d(labels=seq_along(x))
names(mtcars)
mtcars[1, ]
mtcars[1, 0]
mtcars[1, name]
axes3d(labels=TRUE); identify3d(labels=seq_along(rownames(mtcars)))
axes3d(labels=TRUE); identify3d(labels=(rownames(mtcars)))
axes3d(labels=TRUE); identify3d(labels=rownames(mtcars))
rownames(mtcars)
mtcars$rownames
colnames(mtcars)
axes3d(labels=TRUE); identify3d(labels=rownames(mtcars[ ,1:3]))
axes3d(labels=TRUE)
identify3d(labels=rownames(mtcars[ ,1:3]))
plot3d(mtcars[ ,1:3], type = "s", col = "blue", radius = 6, lwd=0, );
axes3d(labels=TRUE)
identify3d(labels=rownames(mtcars[ ,1:3]))
identify3d(mtcars[ , 1:3], labels=rownames(mtcars[ ,1:3]))
library(rgl)
library(shinyRGL)
attach(mtcars)
plot3d(mtcars[ ,1:3], type = "s", col = "blue", radius = 6, lwd=0, top=T);
axes3d(labels=TRUE)
identify3d(mtcars[ , 1:3], labels=rownames(mtcars[ ,1:3]))
shiny::runApp('coursera/data products/prject')
shiny::runApp('coursera/data products/prject')
shiny::runApp('coursera/data products/prject')
shiny::runApp('coursera/data products/prject')
shiny::runApp('coursera/data products/prject')
shiny::runApp('coursera/data products/prject')
shiny::runApp('coursera/data products/prject')
shiny::runApp('coursera/data products/prject')
zPts[1:input$zvar])
shiny::runApp('coursera/data products/prject')
points3d(xPts[mtcars[ , mpg]],
yPts[mtcars[ , wt]],
zPts[mtcars[ , cyl]])
shiny::runApp('coursera/data products/prject')
points3d(mtcars[ , mpg],
mtcars[ , wt],
mtcars[ , cyl])
points3d(mtcars[ , 1],
mtcars[ , 2],
mtcars[ , 3])
points3d(mtcars[ , 1],
mtcars[ , 2],
mtcars[ , 3])
points3d(mtcars[ , "mpg"],
mtcars[ , "wt"],
mtcars[ , "cyl"])
axis3d()
axes3d()
points3d(mtcars[ , "mpg"],
mtcars[ , "wt"],
mtcars[ , "cyl"]);axes3d()
points3d(mtcars[ , "mpg"],
mtcars[ , "wt"],
mtcars[ , "cyl"]);axes3d()
shiny::runApp('coursera/data products/prject')
library(devtools)
library(shiny)
library(shinyRGL)
data(mtcars)
shinyServer(
function(input, output) {
output$My3DPlot <- renderWebGL({
#output$names <- names(mtcars)
xvar <- input$xvar
yvar <- input$yvar
zvar <- input$zvar
points3d(mtcars[ , xvar],
mtcars[ , yvar],
mtcars[ , zvar])
#plot3d(mtcars[ ,c(xvar, yvar, zvar)], type = "s",
axes3d()
#       col = "blue", radius = 6, lwd=0, top=T)
#identify3d(mtcars[ , c(xvar, yvar, zvar)],
#           labels=rownames(mtcars[ ,c(xvar, yvar, zvar)]))
#hist(galton$child, xlab='child height', col='lightblue', main='Histogram')
#mu <- input$mu
#lines(c(mu, mu), c(0, 200), col="red", lwd=5)
#mse <- mean((galton$child - mu)^2)
#text(63, 150, paste("mu = ", mu))
#text(63, 140, paste("MSE=", round(mse, 2)))
})
}
)
shiny::runApp('coursera/data products/prject')
shiny::runApp('coursera/data products/prject')
shiny::runApp('coursera/data products/prject')
shiny::runApp('coursera/data products/prject')
shiny::runApp('coursera/data products/prject')
shiny::runApp('coursera/data products/prject')
shiny::runApp('coursera/data products/prject')
shiny::runApp('coursera/data products/prject')
shiny::runApp('coursera/data products/prject')
shiny::runApp('coursera/data products/prject')
shiny::runApp('coursera/data products/prject')
shiny::runApp('coursera/data products/prject')
shiny::runApp('coursera/data products/prject')
shiny::runApp('coursera/data products/prject')
shiny::runApp('coursera/data products/prject')
shiny::runApp('coursera/data products/prject')
shiny::runApp('coursera/data products/prject')
shiny::runApp('coursera/data products/prject')
shiny::runApp('coursera/data products/prject')
shiny::runApp('coursera/data products/prject')
shiny::runApp('coursera/data products/prject')
rownames(mtcars[ , 1])
rownames(mtcars[1])
rownames(mtcars[1, ])
shiny::runApp('coursera/data products/prject')
library(rgl)
library(shinyRGL)
attach(mtcars)
plot3d(mtcars[ ,1:3], type = "s", col = "blue", radius = 6, lwd=0, top=T);
axes3d(labels=TRUE)
identify3d(mtcars[ , 1:3], labels=rownames(mtcars[1:3, ]))
library(rgl)
library(shinyRGL)
attach(mtcars)
plot3d(mtcars[ ,1:3], type = "s", col = "blue", radius = 6, lwd=0, top=T);
axes3d(labels=TRUE)
identify3d(mtcars[ , 1:3], labels=rownames(mtcars[, 1:3 ]))
library(rgl)
library(shinyRGL)
attach(mtcars)
plot3d(mtcars[ ,1:3], type = "s", col = "blue", radius = 6, lwd=0, top=T);
axes3d(labels=TRUE)
identify3d(mtcars[ , 1:3], labels=rownames(mtcars[, 1:3 ]))
library(rgl)
library(shinyRGL)
attach(mtcars)
plot3d(mtcars[ ,1:3], type = "s", col = "blue", radius = 6, lwd=0, top=T);
axes3d(labels=TRUE)
identify3d(mtcars[ , 1:3], labels=rownames(mtcars[, 1:3 ]))
library(rgl)
library(shinyRGL)
data(mtcars)
plot3d(mtcars[ ,1:3], type = "s", col = "blue", radius = 6, lwd=0, top=T);
axes3d(labels=TRUE)
identify3d(mtcars[ , 1:3], labels=rownames(mtcars[, 1:3 ]))
library(rgl)
library(shinyRGL)
data(mtcars)
plot3d(mtcars[ ,1:3], type = "s", col = "blue", radius = 6, lwd=0, top=T);
axes3d(labels=TRUE)
identify3d(mtcars[ , 1:3], labels=rownames(mtcars[, 1:3 ]))
library(rgl)
library(shinyRGL)
data(mtcars)
plot3d(mtcars[ ,1:3], type = "s", col = "blue", radius = 6, lwd=0, top=T);
axes3d(labels=TRUE)
identify3d(mtcars[ , 1:3], labels=rownames(mtcars[, 1:3 ]))
setwd("~/coursera/data products/project")
shiny::runApp()
shinyapps::setAccountInfo(name='rgferreira', token='F920B0200CF13A0D4E321728368163C0', secret='CQVkfuc86wFR1negjo6nA7w9N0uCKfPjcoLfP41c')
library(shinyapps)
shinyapps::deployApp()
shiny::runApp()
shiny::runApp()
shinyapps::deployApp()
shinyapps::deployApp()
shiny::runApp()
?helpText
shiny::runApp()
runapp(display.mode="showcase")
runApp(display.mode="showcase")
shinyapps::deployApp()
?textOutput
shiny::runApp()
shiny::runApp()
